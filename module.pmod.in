inherit @module@;

#define REQUIRE(X,Y,Z) do{if(!has_index(X,Y))throw(Error.Generic("Public.Tools.RRDtool.rrdtool_create: " + Z + " must specify " + Y + ".\n"));}while(0);

/*! @param filename
 *!   path to new RRD to create.
 *! @param start
 *!   unix time integer for first entry (defaults to NOW)
 *! @param step
 *!   length, in seconds, of each sample period. Defaults to 300 (5 minutes)
 *! 
 *! @param DS
 *!    array( mapping( name: ,DST: [GAUGE|COUNTER|DERIVE|ABSOLUTE],
 *!			  heartbeat: , min: , max: ) )
 *! @param RRA
 *!    array( mapping( CF: [AVERAGE|MIN|MAX|LAST], xff: , steps: , rows: ) )
 */ 
int rrdtool_create(string filename, array DS, array RRA, array|void options) {
  if (sizeof(DS)<1)
    throw(Error.Generic("Public.Tools.RRDtool.rrdtool_create: at least one datasource must be specified.\n"));
  if (sizeof(RRA)<1)
    throw(Error.Generic("Public.Tools.RRDtool.rrdtool_create: at least one round-robin archive must be specified.\n"));

  array newDS, newRRA;
  array os = ({});

  foreach (DS; int ind; mapping vals) {
    string res="";

    REQUIRE(vals, "name", "datasource");
    REQUIRE(vals, "DST", "datasource");
    REQUIRE(vals, "heartbeat", "datasource");
    REQUIRE(vals, "min", "datasource");
    REQUIRE(vals, "max", "datasource");

    if (!has_value( ({ "GAUGE","COUNTER","ABSOLUTE","DERIVE" }),vals->DST))
      throw(Error.Generic("Public.Tools.RRDtool.rrdtool_create: datasource specifies invalid datatype.\n"));;

    res=sprintf("DS:%s:%s:%d:%s:%s",vals->name,vals->DST,vals->heartbeat,
		(string)vals->min,(string)vals->max);
    os+=({ res });
  }

  newDS = os;
  os = ({});

  foreach (RRA; int ind; mapping vals) {
    string res="";
    REQUIRE(vals, "CF", "round-robin archive");

    if (!has_value( ({ "AVERAGE","MIN","MAX","LAST","HWPREDICT","SEASONAL",
			"DEVSEASONAL","DEVPREDICT","FAILURES" }),vals->CF))
      throw(Error.Generic("Public.Tools.RRDtool.rrdtool_create: round-robin archive specifies invalid transform type.\n"));;
    switch (vals->CF) {
      case "AVERAGE":
      case "MIN":
      case "MAX":
      case "LAST":
        REQUIRE(vals, "xff", "round-robin archive");
        REQUIRE(vals, "step", "round-robin archive");
        REQUIRE(vals, "rows", "round-robin archive");
	res=sprintf("RRA:%s:%f:%d:%d",vals->CF,vals->xff,vals->step,vals->rows);
	os+=({ res });
	break;
      case "HWPREDICT":
        REQUIRE(vals, "rows", "round-robin archive");
        REQUIRE(vals, "alpha", "round-robin archive");
        REQUIRE(vals, "beta", "round-robin archive");
        REQUIRE(vals, "period", "round-robin archive");
	res=sprintf("RRA:%s:%f:%f:%f:%d",vals->CF,vals->rows,vals->alpha,vals->beta,vals->period);
	if (has_index(vals,"rranum"))
	  res=sprintf("%s:%d",res,vals->rranum);
	os+=({ res });
	break;
      case "SEASONAL":
      case "DEVSEASONAL":
        REQUIRE(vals, "period", "round-robin archive");
        REQUIRE(vals, "gamma", "round-robin archive");
        REQUIRE(vals, "rranum", "round-robin archive");
	res=sprintf("RRA:%s:%d:%f:%d",vals->CF,vals->period,vals->gamma,vals->rranum);
	os+=({ res });
	break;
      case "DEVPREDICT":
        REQUIRE(vals, "rows", "round-robin archive");
        REQUIRE(vals, "rranum", "round-robin archive");
	res=sprintf("RRA:%s:%d:%d",vals->CF,vals->rows,vals->rranum);
	os+=({ res });
	break;
      case "FAILURES":
        REQUIRE(vals, "rows", "round-robin archive");
        REQUIRE(vals, "threshold", "round-robin archive");
        REQUIRE(vals, "winlen", "round-robin archive");
        REQUIRE(vals, "rranum", "round-robin archive");
	res+=sprintf("RRA:%s:%d:%d:%d:%d",vals->CF,vals->rows,vals->threshold,vals->winlen,vals->rranum);
	os+=({ res });
	break;
    }
  }

  newRRA = os;

  return low_rrdtool_create(filename, newDS, newRRA, options);
}

//!
int low_rrdtool_create(string filename, array DS, array RRA, array|void options) {
  if (sizeof(DS)<1)
    throw(Error.Generic("Public.Tools.RRDtool.low_rrdtool_create: at least one datasource must be specified.\n"));
  if (sizeof(RRA)<1)
    throw(Error.Generic("Public.Tools.RRDtool.low_rrdtool_create: at least one round-robin archive must be specified.\n"));
  array os=({ "create" });
  os+=({ filename });
  if (!zero_type(options))
    os+=options;
  os+=DS;
  os+=RRA;

  werror("os==%O\n",os);
  int res=rrd_create(sizeof(os),os);
  return res;
}

void dump() {
}

mapping fetch(string filename, string CF, int|void res,
	    string|void start, string|void end) {
  array os=({ "fetch" });
  os+=({ filename });
  if (!has_value(({ "AVERAGE","MIN","MAX","LAST" }),CF))
    return ([]);
  os+=({ CF });
  if (!zero_type(start)) {
    os+=({ "--start" });
    os+=({ start });
  }
  if (!zero_type(end)) {
    os+=({ "--end" });
    os+=({ end });
  }
  mapping m=rrd_fetch(sizeof(os),os);
  return m;
}

int first(string filename, int|void rraindex) {
  array os=({ "first" });
  os+=({ filename });
  if (!zero_type(rraindex)) {
    os+=({ "--rraindex" });
    os+=({ rraindex });
  }
  return rrd_first(sizeof(os),os);
}

int graph(string outputfile, array DEFs,
	   array|void options) {
  array os=({ "graph" });
  os+=({ outputfile });
  if (!zero_type(options))
    os+=options;
  os+=DEFs;
  int k=rrd_graph(sizeof(os),os);
  return k;
}

int last(string filename) {
  array os=({ "last" });
  os+=({ filename });
  return rrd_last(sizeof(os),os);
}

void resize(array opts) {
}

void restore(array opts) {
}

void tune(array opts) {
}

int update(string filename, array vals) {
  array os=({ "update" });
  os+=({ filename });
  os+=vals;
  return rrd_update(sizeof(os),os);
}

void xport(array opts) {
}

